--- 
# TinyTapeout project information
#
# As everyone will have access to all designs, try to make it easy for someone new to your design to know what
# it does and how to operate it.
#
# This will be automatically collected and used to make a datasheet for the chip.
project: 
  author:       "maehw"
  title:        "Low-speed UART transmitter with limited character set loading"
  description:  "300(?) baud UART transmitter (8N1) with limited character set (0x40..0x5F; includes all capital letters in the ASCII table) loading."
  how_it_works: "The heart of the design is a 13 bit shift register (built from D flip-flops). When a word has been transmitted, it will be transmitted again and again until a new word is loaded into the shift register or the output is disabled (the word will keep on cycling internally)."
  how_to_test:  "Load a character into the design and attach a UART receiver (or oscilloscope or logic analyzer) on the output side."
  external_hw:  "UART receiver or oscilloscope or logic analyzer (optional)"
  doc_link:     "https://github.com/maehw/wokwi-verilog-gds-lowspeed-tiny-uart/blob/main/README.md"
  clock_hz:     300     # Clock frequency in Hz (not sure if the design supports such a "high" value! could be even higher if technically possible! the clock rate defines the UART baudrate)
  language:     "wokwi"
  wokwi_id:     341631511790879314
  picture:      "https://user-images.githubusercontent.com/6305922/188118935-462412b2-4f26-4b63-ae8d-aac4dac185e6.png" # relative path to a picture in your repository; TODO/FIXME: not part of the repo; no relative path!
  inputs:
    - 300 Hz input clock signal (or different value supported by the whole #tinytapeout design! defining the baudrate of the UART transmitter)
    - bit b0 (the least significant bit) of the loaded and transmitted character
    - bit b1 of the loaded and transmitted character
    - bit b2 of the loaded and transmitted character
    - bit b3 of the loaded and transmitted character
    - bit b4 of the loaded and transmitted character
    - load word into shift register from parallel input (IN1..IN5) (1) or cycle the existing word with start/stop bits around it (0)
    - output enable (for gated output signals): 1 output is enabled, 0 output is disabled (permanently set to HIGH/1)
  outputs:
    - UART (serial output pin, direct throughput)
    - UART (serial output pin, gated by enable signal)
    - UART (serial output pin, reverse polarity, direct throughput)
    - UART (serial output pin, reverse polarity, gated by enable signal)
    - UART (MSBit, direct throughput); typically set to 1 or can be used to sniffing the word cycling through the shift register)
    - UART (MSBit, reverse polarity, direct throughput); same usage as above
    - UART (MSBit, gated by enable signal); typically set to 1 or can be used to sniffing the word cycling through the shift register)
    - UART (MSBit, reverse polarity, gated by enable signal); same usage as above
